import pandas as pd
df = pd.read_csv('output1.csv')
# prepare data
types = df['Type'].isin(['Grammar', 'Pattern', 'Names'])
drop_cols = ['Type', 'TP', 'FN', 'FP']
df = df[types].drop(columns = drop_cols)
df.head()

values = ["Grammar",[2.0151009559631348,5.352423191070557,5.086075305938721,6.8026769161224365,4.016929864883423,4.6846325397491455,4.822716236114502,8.783480644226074,2.38147234916687,9.81007170677185,3.5610544681549072,5.368562459945679,10.224669218063354,5.202610492706299,5.124924659729004,8.08877158164978,4.479897737503052,13.512442111968994,8.575469732284546,5.209386825561523,4.79626202583313], ["91	9	1	0","254	0	0	0","272	3	0	0","443	0	1	0","250	7	1	0","194	9	0	1","347	6	2	1","509	3	1	0","149	2	0	0","546	1	0	0","360	4	0	0","299	6	0	0","789	4	0	0","271	7	2	1","362	4	1	1","435	9	1	1","207	0	8	0","724	7	1	1","259	4	1	0","280	1	1	2","210	9	5	2"]]
values2 = ["Patterns", [0.10779142379760742,0.16205763816833496,0.13231706619262695,0.10648488998413086,0.2067859172821045,0.24388933181762695,0.09360742568969727,0.38756370544433594,0.08347296714782715,0.22226285934448242,0.1305980682373047,0.3434603214263916,0.36125636100769043,0.38727807998657227,0.1523890495300293,0.4193274974822998,0.1069498062133789,0.6054074764251709,0.3292093276977539,0.16919183731079102,0.42996883392333984],["91	3	7	0","254	0	0	0","272	3	0	0","443	0	1	0","250	3	5	0","195	7	2	0","348	7	1	0","509	3	1	0","149	1	1	0","546	1	0	0","360	4	0	0","299	3	3	0","789	4	0	0","272	3	6	0","363	5	0	0","436	2	8	0","206	2	6	1","725	3	5	0","255	3	2	4","282	1	1	0","212	6	8	0"]]
TN = [int(item.split()[0]) for item in values[2]]




from sklearn.cluster import KMeans
import numpy as np
# k means
kmeans = KMeans(n_clusters=3, random_state=0)
df['cluster'] = kmeans.fit_predict(df[['Times', 'TN']])
# get centroids
# centroids = kmeans.cluster_centers_
# cen_x = [i[0] for i in centroids]
# cen_y = [i[1] for i in centroids]
## add to df
# df['cen_x'] = df.cluster.map({0:cen_x[0], 1:cen_x[1], 2:cen_x[2]})
# df['cen_y'] = df.cluster.map({0:cen_y[0], 1:cen_y[1], 2:cen_y[2]})
# define and map colors
colors = ['#DF2020', '#81DF20', '#2095DF']
# df['c'] = df.cluster.map({0:colors[0], 1:colors[1], 2:colors[2]})

import matplotlib.pyplot as plt
# plt.scatter(df.Times, df.TN, c=colors, alpha = 0.6, s=10)
plt.scatter(values[1], TN, color=colors[0], alpha = 0.6, s=10)
plt.scatter(values2[1], TN, color=colors[1], alpha = 0.6, s=10)
plt.show()
# import csv
#
# values = [
#     0.38947582244873047,
#     0.26556396484375,
#     0.24612784385681152,
#     0.15348553657531738,
#     0.1383986473083496,
#     0.26483654975891113,
#     0.10225701332092285,
#     0.2084822654724121,
#     0.09541511535644531,
#     0.437999963760376,
#     0.17308902740478516,
#     0.4705924987792969,
#     0.14483642578125,
#     0.14514470100402832,
#     0.8670802116394043,
#     0.4828310012817383,
#     0.2579019069671631,
#     0.4996781349182129,
#     0.8010790348052979,
#     0.39133787155151367,
#     0.2567563056945801
# ]
#
# # Define the output CSV file path
# output_file = "output1.csv"
#
# # Create and open the CSV file in write mode
# with open(output_file, "w", newline="") as file:
#     writer = csv.writer(file)
#
#     # Write the header row
#     writer.writerow(["Name", "Values"])
#
#     # Write the data row
#     writer.writerow(["Values", values])

# 2.473193645477295
# 2.084282636642456
# 2.3240301609039307
# 3.364915370941162
# 1.8339331150054932
# 4.576664447784424
# 1.2449967861175537
# 3.7523767948150635
# 1.4414446353912354
# 3.3625917434692383
# 3.940164566040039
# 5.790936708450317
# 2.3231327533721924
# 2.5474557876586914
# 6.137329816818237
# 4.327297687530518
# 2.98309063911438
# 9.684839725494385
# 4.8223817348480225
# 3.647923231124878
# 4.9997241497039795
#
# 77.66270613670349



# 0.38947582244873047
# 0.26556396484375
# 0.24612784385681152
# 0.15348553657531738
# 0.1383986473083496
# 0.26483654975891113
# 0.10225701332092285
# 0.2084822654724121
# 0.09541511535644531
# 0.437999963760376
# 0.17308902740478516
# 0.4705924987792969
# 0.14483642578125
# 0.14514470100402832
# 0.8670802116394043
# 0.4828310012817383
# 0.2579019069671631
# 0.4996781349182129
# 0.8010790348052979
# 0.39133787155151367
# 0.2567563056945801
#
# 6.792369842529297





